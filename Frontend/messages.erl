%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.11.0
-module(messages).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type 'Message'() ::
      #{type                    => iodata(),        % = 1
        user                    => 'User'(),        % = 2
        response                => 'Response'(),    % = 3
        manufacturerOrder       => 'ManufacturerOrder'(), % = 4
        importerOffer           => 'ImporterOffer'() % = 5
       }.

-type 'User'() ::
      #{username                => iodata(),        % = 1
        password                => iodata(),        % = 2
        type                    => integer()        % = 3, 32 bits
       }.

-type 'Response'() ::
      #{response                => iodata()         % = 4
       }.

-type 'ManufacturerOrder'() ::
      #{id                      => integer(),       % = 1, 32 bits
        manufacturer            => iodata(),        % = 2
        product                 => iodata(),        % = 3
        minQuantity             => integer(),       % = 4, 32 bits
        maxQuantity             => integer(),       % = 5, 32 bits
        unitPrice               => float() | integer() | infinity | '-infinity' | nan, % = 6
        active                  => integer(),       % = 7, 32 bits
        negotiation             => integer()        % = 8, 32 bits
       }.

-type 'ImporterOffer'() ::
      #{id                      => integer(),       % = 1, 32 bits
        manufacturer            => iodata(),        % = 2
        product                 => iodata(),        % = 3
        quantity                => integer(),       % = 4, 32 bits
        unitPrice               => float() | integer() | infinity | '-infinity' | nan % = 5
       }.

-export_type(['Message'/0, 'User'/0, 'Response'/0, 'ManufacturerOrder'/0, 'ImporterOffer'/0]).

-spec encode_msg('Message'() | 'User'() | 'Response'() | 'ManufacturerOrder'() | 'ImporterOffer'(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg('Message'() | 'User'() | 'Response'() | 'ManufacturerOrder'() | 'ImporterOffer'(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Message' ->
	  encode_msg_Message(id(Msg, TrUserData), TrUserData);
      'User' ->
	  encode_msg_User(id(Msg, TrUserData), TrUserData);
      'Response' ->
	  encode_msg_Response(id(Msg, TrUserData), TrUserData);
      'ManufacturerOrder' ->
	  encode_msg_ManufacturerOrder(id(Msg, TrUserData),
				       TrUserData);
      'ImporterOffer' ->
	  encode_msg_ImporterOffer(id(Msg, TrUserData),
				   TrUserData)
    end.


encode_msg_Message(Msg, TrUserData) ->
    encode_msg_Message(Msg, <<>>, TrUserData).


encode_msg_Message(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{type := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{user := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 e_mfield_Message_user(TrF2, <<B1/binary, 18>>,
				       TrUserData)
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{response := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 e_mfield_Message_response(TrF3, <<B2/binary, 26>>,
					   TrUserData)
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{manufacturerOrder := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 e_mfield_Message_manufacturerOrder(TrF4,
						    <<B3/binary, 34>>,
						    TrUserData)
	       end;
	   _ -> B3
	 end,
    case M of
      #{importerOffer := F5} ->
	  begin
	    TrF5 = id(F5, TrUserData),
	    e_mfield_Message_importerOffer(TrF5, <<B4/binary, 42>>,
					   TrUserData)
	  end;
      _ -> B4
    end.

encode_msg_User(Msg, TrUserData) ->
    encode_msg_User(Msg, <<>>, TrUserData).


encode_msg_User(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{username := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{password := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	       end;
	   _ -> B1
	 end,
    case M of
      #{type := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	  end;
      _ -> B2
    end.

encode_msg_Response(Msg, TrUserData) ->
    encode_msg_Response(Msg, <<>>, TrUserData).


encode_msg_Response(#{} = M, Bin, TrUserData) ->
    case M of
      #{response := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    e_type_string(TrF1, <<Bin/binary, 34>>, TrUserData)
	  end;
      _ -> Bin
    end.

encode_msg_ManufacturerOrder(Msg, TrUserData) ->
    encode_msg_ManufacturerOrder(Msg, <<>>, TrUserData).


encode_msg_ManufacturerOrder(#{} = M, Bin,
			     TrUserData) ->
    B1 = case M of
	   #{id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{manufacturer := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{product := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{minQuantity := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData)
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{maxQuantity := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 e_type_int64(TrF5, <<B4/binary, 40>>, TrUserData)
	       end;
	   _ -> B4
	 end,
    B6 = case M of
	   #{unitPrice := F6} ->
	       begin
		 TrF6 = id(F6, TrUserData),
		 e_type_double(TrF6, <<B5/binary, 49>>, TrUserData)
	       end;
	   _ -> B5
	 end,
    B7 = case M of
	   #{active := F7} ->
	       begin
		 TrF7 = id(F7, TrUserData),
		 e_type_int32(TrF7, <<B6/binary, 56>>, TrUserData)
	       end;
	   _ -> B6
	 end,
    case M of
      #{negotiation := F8} ->
	  begin
	    TrF8 = id(F8, TrUserData),
	    e_type_int64(TrF8, <<B7/binary, 64>>, TrUserData)
	  end;
      _ -> B7
    end.

encode_msg_ImporterOffer(Msg, TrUserData) ->
    encode_msg_ImporterOffer(Msg, <<>>, TrUserData).


encode_msg_ImporterOffer(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{manufacturer := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{product := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{quantity := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData)
	       end;
	   _ -> B3
	 end,
    case M of
      #{unitPrice := F5} ->
	  begin
	    TrF5 = id(F5, TrUserData),
	    e_type_double(TrF5, <<B4/binary, 41>>, TrUserData)
	  end;
      _ -> B4
    end.

e_mfield_Message_user(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_User(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_response(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Response(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_manufacturerOrder(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_ManufacturerOrder(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_importerOffer(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ImporterOffer(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('Message', Bin, TrUserData) ->
    id(decode_msg_Message(Bin, TrUserData), TrUserData);
decode_msg_2_doit('User', Bin, TrUserData) ->
    id(decode_msg_User(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Response', Bin, TrUserData) ->
    id(decode_msg_Response(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ManufacturerOrder', Bin,
		  TrUserData) ->
    id(decode_msg_ManufacturerOrder(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ImporterOffer', Bin, TrUserData) ->
    id(decode_msg_ImporterOffer(Bin, TrUserData),
       TrUserData).



decode_msg_Message(Bin, TrUserData) ->
    dfp_read_field_def_Message(Bin, 0, 0,
			       id('$undef', TrUserData),
			       id('$undef', TrUserData),
			       id('$undef', TrUserData),
			       id('$undef', TrUserData),
			       id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Message(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Message_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
dfp_read_field_def_Message(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Message_user(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
dfp_read_field_def_Message(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Message_response(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_Message(<<34, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Message_manufacturerOrder(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Message(<<42, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Message_importerOffer(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Message(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{type => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{user => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{response => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{manufacturerOrder => F@_4}
	 end,
    if F@_5 == '$undef' -> S5;
       true -> S5#{importerOffer => F@_5}
    end;
dfp_read_field_def_Message(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_Message(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_Message(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Message(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_Message(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Message_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, TrUserData);
      18 ->
	  d_field_Message_user(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, TrUserData);
      26 ->
	  d_field_Message_response(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      34 ->
	  d_field_Message_manufacturerOrder(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, TrUserData);
      42 ->
	  d_field_Message_importerOffer(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Message(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, TrUserData);
	    1 ->
		skip_64_Message(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, TrUserData);
	    2 ->
		skip_length_delimited_Message(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_Message(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_Message(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, TrUserData)
	  end
    end;
dg_read_field_def_Message(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{type => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{user => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{response => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{manufacturerOrder => F@_4}
	 end,
    if F@_5 == '$undef' -> S5;
       true -> S5#{importerOffer => F@_5}
    end.

d_field_Message_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Message_type(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Message_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

d_field_Message_user(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Message_user(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Message_user(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, Prev, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_User(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1,
			       if Prev == '$undef' -> NewFValue;
				  true ->
				      merge_msg_User(Prev, NewFValue,
						     TrUserData)
			       end,
			       F@_3, F@_4, F@_5, TrUserData).

d_field_Message_response(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Message_response(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Message_response(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, Prev, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Response(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       if Prev == '$undef' -> NewFValue;
				  true ->
				      merge_msg_Response(Prev, NewFValue,
							 TrUserData)
			       end,
			       F@_4, F@_5, TrUserData).

d_field_Message_manufacturerOrder(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData)
    when N < 57 ->
    d_field_Message_manufacturerOrder(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, TrUserData);
d_field_Message_manufacturerOrder(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, Prev, F@_5,
				  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ManufacturerOrder(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       F@_3,
			       if Prev == '$undef' -> NewFValue;
				  true ->
				      merge_msg_ManufacturerOrder(Prev,
								  NewFValue,
								  TrUserData)
			       end,
			       F@_5, TrUserData).

d_field_Message_importerOffer(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Message_importerOffer(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
d_field_Message_importerOffer(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, Prev,
			      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ImporterOffer(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4,
			       if Prev == '$undef' -> NewFValue;
				  true ->
				      merge_msg_ImporterOffer(Prev, NewFValue,
							      TrUserData)
			       end,
			       TrUserData).

skip_varint_Message(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_Message(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
skip_varint_Message(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_Message(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_Message(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
skip_length_delimited_Message(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Message(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_group_Message(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Message(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_32_Message(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_64_Message(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

decode_msg_User(Bin, TrUserData) ->
    dfp_read_field_def_User(Bin, 0, 0,
			    id('$undef', TrUserData), id('$undef', TrUserData),
			    id('$undef', TrUserData), TrUserData).

dfp_read_field_def_User(<<10, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_field_User_username(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_User(<<18, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_field_User_password(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_User(<<24, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    d_field_User_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		      TrUserData);
dfp_read_field_def_User(<<>>, 0, 0, F@_1, F@_2, F@_3,
			_) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{username => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{password => F@_2}
	 end,
    if F@_3 == '$undef' -> S3;
       true -> S3#{type => F@_3}
    end;
dfp_read_field_def_User(Other, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData) ->
    dg_read_field_def_User(Other, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData).

dg_read_field_def_User(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_User(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
dg_read_field_def_User(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_User_username(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      18 ->
	  d_field_User_password(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      24 ->
	  d_field_User_type(Rest, 0, 0, F@_1, F@_2, F@_3,
			    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_User(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    1 ->
		skip_64_User(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_User(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData);
	    3 ->
		skip_group_User(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				TrUserData);
	    5 ->
		skip_32_User(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_User(<<>>, 0, 0, F@_1, F@_2, F@_3,
		       _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{username => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{password => F@_2}
	 end,
    if F@_3 == '$undef' -> S3;
       true -> S3#{type => F@_3}
    end.

d_field_User_username(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_User_username(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_User_username(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_User(RestF, 0, 0, NewFValue, F@_2,
			    F@_3, TrUserData).

d_field_User_password(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_User_password(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_User_password(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_User(RestF, 0, 0, F@_1, NewFValue,
			    F@_3, TrUserData).

d_field_User_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_User_type(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, TrUserData);
d_field_User_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_User(RestF, 0, 0, F@_1, F@_2,
			    NewFValue, TrUserData).

skip_varint_User(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_User(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		     TrUserData);
skip_varint_User(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_User(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

skip_length_delimited_User(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_User(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_User(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_User(Rest2, 0, 0, F@_1, F@_2, F@_3,
			    TrUserData).

skip_group_User(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_User(Rest, 0, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

skip_32_User(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, TrUserData) ->
    dfp_read_field_def_User(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

skip_64_User(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, TrUserData) ->
    dfp_read_field_def_User(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

decode_msg_Response(Bin, TrUserData) ->
    dfp_read_field_def_Response(Bin, 0, 0,
				id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Response(<<34, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_Response_response(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_Response(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{response => F@_1}
    end;
dfp_read_field_def_Response(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_Response(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_Response(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Response(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_Response(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      34 ->
	  d_field_Response_response(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Response(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Response(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Response(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_Response(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_Response(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Response(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{response => F@_1}
    end.

d_field_Response_response(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Response_response(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_Response_response(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0, NewFValue,
				TrUserData).

skip_varint_Response(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_Response(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Response(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_Response(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Response(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_Response(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Response(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_Response(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Response(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_Response(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_Response(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1,
				TrUserData).

decode_msg_ManufacturerOrder(Bin, TrUserData) ->
    dfp_read_field_def_ManufacturerOrder(Bin, 0, 0,
					 id('$undef', TrUserData),
					 id('$undef', TrUserData),
					 id('$undef', TrUserData),
					 id('$undef', TrUserData),
					 id('$undef', TrUserData),
					 id('$undef', TrUserData),
					 id('$undef', TrUserData),
					 id('$undef', TrUserData), TrUserData).

dfp_read_field_def_ManufacturerOrder(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, TrUserData) ->
    d_field_ManufacturerOrder_id(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 TrUserData);
dfp_read_field_def_ManufacturerOrder(<<18,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, TrUserData) ->
    d_field_ManufacturerOrder_manufacturer(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, F@_8, TrUserData);
dfp_read_field_def_ManufacturerOrder(<<26,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, TrUserData) ->
    d_field_ManufacturerOrder_product(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      TrUserData);
dfp_read_field_def_ManufacturerOrder(<<32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, TrUserData) ->
    d_field_ManufacturerOrder_minQuantity(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, TrUserData);
dfp_read_field_def_ManufacturerOrder(<<40,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, TrUserData) ->
    d_field_ManufacturerOrder_maxQuantity(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, TrUserData);
dfp_read_field_def_ManufacturerOrder(<<49,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, TrUserData) ->
    d_field_ManufacturerOrder_unitPrice(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, TrUserData);
dfp_read_field_def_ManufacturerOrder(<<56,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, TrUserData) ->
    d_field_ManufacturerOrder_active(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     TrUserData);
dfp_read_field_def_ManufacturerOrder(<<64,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, TrUserData) ->
    d_field_ManufacturerOrder_negotiation(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, TrUserData);
dfp_read_field_def_ManufacturerOrder(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{id => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{manufacturer => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{product => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{minQuantity => F@_4}
	 end,
    S6 = if F@_5 == '$undef' -> S5;
	    true -> S5#{maxQuantity => F@_5}
	 end,
    S7 = if F@_6 == '$undef' -> S6;
	    true -> S6#{unitPrice => F@_6}
	 end,
    S8 = if F@_7 == '$undef' -> S7;
	    true -> S7#{active => F@_7}
	 end,
    if F@_8 == '$undef' -> S8;
       true -> S8#{negotiation => F@_8}
    end;
dfp_read_field_def_ManufacturerOrder(Other, Z1, Z2,
				     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				     F@_8, TrUserData) ->
    dg_read_field_def_ManufacturerOrder(Other, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, TrUserData).

dg_read_field_def_ManufacturerOrder(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ManufacturerOrder(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, TrUserData);
dg_read_field_def_ManufacturerOrder(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ManufacturerOrder_id(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       TrUserData);
      18 ->
	  d_field_ManufacturerOrder_manufacturer(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 F@_7, F@_8, TrUserData);
      26 ->
	  d_field_ManufacturerOrder_product(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					    F@_8, TrUserData);
      32 ->
	  d_field_ManufacturerOrder_minQuantity(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						F@_7, F@_8, TrUserData);
      40 ->
	  d_field_ManufacturerOrder_maxQuantity(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						F@_7, F@_8, TrUserData);
      49 ->
	  d_field_ManufacturerOrder_unitPrice(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, TrUserData);
      56 ->
	  d_field_ManufacturerOrder_active(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					   TrUserData);
      64 ->
	  d_field_ManufacturerOrder_negotiation(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						F@_7, F@_8, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ManufacturerOrder(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, F@_6, F@_7,
					      F@_8, TrUserData);
	    1 ->
		skip_64_ManufacturerOrder(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, F@_5, F@_6, F@_7, F@_8,
					  TrUserData);
	    2 ->
		skip_length_delimited_ManufacturerOrder(Rest, 0, 0,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, F@_6, F@_7, F@_8,
							TrUserData);
	    3 ->
		skip_group_ManufacturerOrder(Rest, Key bsr 3, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, TrUserData);
	    5 ->
		skip_32_ManufacturerOrder(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, F@_5, F@_6, F@_7, F@_8,
					  TrUserData)
	  end
    end;
dg_read_field_def_ManufacturerOrder(<<>>, 0, 0, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{id => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{manufacturer => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{product => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{minQuantity => F@_4}
	 end,
    S6 = if F@_5 == '$undef' -> S5;
	    true -> S5#{maxQuantity => F@_5}
	 end,
    S7 = if F@_6 == '$undef' -> S6;
	    true -> S6#{unitPrice => F@_6}
	 end,
    S8 = if F@_7 == '$undef' -> S7;
	    true -> S7#{active => F@_7}
	 end,
    if F@_8 == '$undef' -> S8;
       true -> S8#{negotiation => F@_8}
    end.

d_field_ManufacturerOrder_id(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, TrUserData)
    when N < 57 ->
    d_field_ManufacturerOrder_id(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 TrUserData);
d_field_ManufacturerOrder_id(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ManufacturerOrder(RestF, 0, 0,
					 NewFValue, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, TrUserData).

d_field_ManufacturerOrder_manufacturer(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_ManufacturerOrder_manufacturer(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, F@_8,
					   TrUserData);
d_field_ManufacturerOrder_manufacturer(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				       F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ManufacturerOrder(RestF, 0, 0, F@_1,
					 NewFValue, F@_3, F@_4, F@_5, F@_6,
					 F@_7, F@_8, TrUserData).

d_field_ManufacturerOrder_product(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_ManufacturerOrder_product(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_ManufacturerOrder_product(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
				  F@_8, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ManufacturerOrder(RestF, 0, 0, F@_1,
					 F@_2, NewFValue, F@_4, F@_5, F@_6,
					 F@_7, F@_8, TrUserData).

d_field_ManufacturerOrder_minQuantity(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_ManufacturerOrder_minQuantity(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_ManufacturerOrder_minQuantity(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
				      F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ManufacturerOrder(RestF, 0, 0, F@_1,
					 F@_2, F@_3, NewFValue, F@_5, F@_6,
					 F@_7, F@_8, TrUserData).

d_field_ManufacturerOrder_maxQuantity(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_ManufacturerOrder_maxQuantity(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_ManufacturerOrder_maxQuantity(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
				      F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ManufacturerOrder(RestF, 0, 0, F@_1,
					 F@_2, F@_3, F@_4, NewFValue, F@_6,
					 F@_7, F@_8, TrUserData).

d_field_ManufacturerOrder_unitPrice(<<0:48, 240, 127,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				    F@_7, F@_8, TrUserData) ->
    dfp_read_field_def_ManufacturerOrder(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5,
					 id(infinity, TrUserData), F@_7, F@_8,
					 TrUserData);
d_field_ManufacturerOrder_unitPrice(<<0:48, 240, 255,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				    F@_7, F@_8, TrUserData) ->
    dfp_read_field_def_ManufacturerOrder(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5,
					 id('-infinity', TrUserData), F@_7,
					 F@_8, TrUserData);
d_field_ManufacturerOrder_unitPrice(<<_:48, 15:4, _:4,
				      _:1, 127:7, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				    F@_7, F@_8, TrUserData) ->
    dfp_read_field_def_ManufacturerOrder(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5,
					 id(nan, TrUserData), F@_7, F@_8,
					 TrUserData);
d_field_ManufacturerOrder_unitPrice(<<Value:64/little-float,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				    F@_7, F@_8, TrUserData) ->
    dfp_read_field_def_ManufacturerOrder(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5,
					 id(Value, TrUserData), F@_7, F@_8,
					 TrUserData).

d_field_ManufacturerOrder_active(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_ManufacturerOrder_active(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_ManufacturerOrder_active(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _,
				 F@_8, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ManufacturerOrder(RestF, 0, 0, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6,
					 NewFValue, F@_8, TrUserData).

d_field_ManufacturerOrder_negotiation(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_ManufacturerOrder_negotiation(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_ManufacturerOrder_negotiation(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ManufacturerOrder(RestF, 0, 0, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 NewFValue, TrUserData).

skip_varint_ManufacturerOrder(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, TrUserData) ->
    skip_varint_ManufacturerOrder(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				  TrUserData);
skip_varint_ManufacturerOrder(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, TrUserData) ->
    dfp_read_field_def_ManufacturerOrder(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, TrUserData).

skip_length_delimited_ManufacturerOrder(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    skip_length_delimited_ManufacturerOrder(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, F@_8,
					    TrUserData);
skip_length_delimited_ManufacturerOrder(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ManufacturerOrder(Rest2, 0, 0, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, TrUserData).

skip_group_ManufacturerOrder(Bin, FNum, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ManufacturerOrder(Rest, 0, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, TrUserData).

skip_32_ManufacturerOrder(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  TrUserData) ->
    dfp_read_field_def_ManufacturerOrder(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, TrUserData).

skip_64_ManufacturerOrder(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  TrUserData) ->
    dfp_read_field_def_ManufacturerOrder(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, TrUserData).

decode_msg_ImporterOffer(Bin, TrUserData) ->
    dfp_read_field_def_ImporterOffer(Bin, 0, 0,
				     id('$undef', TrUserData),
				     id('$undef', TrUserData),
				     id('$undef', TrUserData),
				     id('$undef', TrUserData),
				     id('$undef', TrUserData), TrUserData).

dfp_read_field_def_ImporterOffer(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_ImporterOffer_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_ImporterOffer(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_ImporterOffer_manufacturer(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_ImporterOffer(<<26, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_ImporterOffer_product(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_ImporterOffer(<<32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_ImporterOffer_quantity(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_ImporterOffer(<<41, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_ImporterOffer_unitPrice(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_ImporterOffer(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{id => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{manufacturer => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{product => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{quantity => F@_4}
	 end,
    if F@_5 == '$undef' -> S5;
       true -> S5#{unitPrice => F@_5}
    end;
dfp_read_field_def_ImporterOffer(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_ImporterOffer(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_ImporterOffer(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ImporterOffer(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
dg_read_field_def_ImporterOffer(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ImporterOffer_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      18 ->
	  d_field_ImporterOffer_manufacturer(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
      26 ->
	  d_field_ImporterOffer_product(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, TrUserData);
      32 ->
	  d_field_ImporterOffer_quantity(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
      41 ->
	  d_field_ImporterOffer_unitPrice(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ImporterOffer(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_ImporterOffer(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_ImporterOffer(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    TrUserData);
	    3 ->
		skip_group_ImporterOffer(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_ImporterOffer(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_ImporterOffer(<<>>, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{id => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{manufacturer => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{product => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{quantity => F@_4}
	 end,
    if F@_5 == '$undef' -> S5;
       true -> S5#{unitPrice => F@_5}
    end.

d_field_ImporterOffer_id(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_ImporterOffer_id(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_ImporterOffer_id(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ImporterOffer(RestF, 0, 0, NewFValue,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_ImporterOffer_manufacturer(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData)
    when N < 57 ->
    d_field_ImporterOffer_manufacturer(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, TrUserData);
d_field_ImporterOffer_manufacturer(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, F@_3, F@_4, F@_5,
				   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ImporterOffer(RestF, 0, 0, F@_1,
				     NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_ImporterOffer_product(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_ImporterOffer_product(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
d_field_ImporterOffer_product(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ImporterOffer(RestF, 0, 0, F@_1,
				     F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_ImporterOffer_quantity(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_ImporterOffer_quantity(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
d_field_ImporterOffer_quantity(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ImporterOffer(RestF, 0, 0, F@_1,
				     F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_ImporterOffer_unitPrice(<<0:48, 240, 127,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
				TrUserData) ->
    dfp_read_field_def_ImporterOffer(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, id(infinity, TrUserData),
				     TrUserData);
d_field_ImporterOffer_unitPrice(<<0:48, 240, 255,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
				TrUserData) ->
    dfp_read_field_def_ImporterOffer(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4,
				     id('-infinity', TrUserData), TrUserData);
d_field_ImporterOffer_unitPrice(<<_:48, 15:4, _:4, _:1,
				  127:7, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
				TrUserData) ->
    dfp_read_field_def_ImporterOffer(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, id(nan, TrUserData),
				     TrUserData);
d_field_ImporterOffer_unitPrice(<<Value:64/little-float,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
				TrUserData) ->
    dfp_read_field_def_ImporterOffer(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, id(Value, TrUserData),
				     TrUserData).

skip_varint_ImporterOffer(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_ImporterOffer(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
skip_varint_ImporterOffer(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_ImporterOffer(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_ImporterOffer(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData)
    when N < 57 ->
    skip_length_delimited_ImporterOffer(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, TrUserData);
skip_length_delimited_ImporterOffer(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ImporterOffer(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_ImporterOffer(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ImporterOffer(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_ImporterOffer(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_ImporterOffer(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_ImporterOffer(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_ImporterOffer(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Message' -> merge_msg_Message(Prev, New, TrUserData);
      'User' -> merge_msg_User(Prev, New, TrUserData);
      'Response' -> merge_msg_Response(Prev, New, TrUserData);
      'ManufacturerOrder' ->
	  merge_msg_ManufacturerOrder(Prev, New, TrUserData);
      'ImporterOffer' ->
	  merge_msg_ImporterOffer(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_Message/3}).
merge_msg_Message(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{type := NFtype}} -> S1#{type => NFtype};
	   {#{type := PFtype}, _} -> S1#{type => PFtype};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{user := PFuser}, #{user := NFuser}} ->
	       S2#{user => merge_msg_User(PFuser, NFuser, TrUserData)};
	   {_, #{user := NFuser}} -> S2#{user => NFuser};
	   {#{user := PFuser}, _} -> S2#{user => PFuser};
	   {_, _} -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {#{response := PFresponse},
	    #{response := NFresponse}} ->
	       S3#{response =>
		       merge_msg_Response(PFresponse, NFresponse, TrUserData)};
	   {_, #{response := NFresponse}} ->
	       S3#{response => NFresponse};
	   {#{response := PFresponse}, _} ->
	       S3#{response => PFresponse};
	   {_, _} -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {#{manufacturerOrder := PFmanufacturerOrder},
	    #{manufacturerOrder := NFmanufacturerOrder}} ->
	       S4#{manufacturerOrder =>
		       merge_msg_ManufacturerOrder(PFmanufacturerOrder,
						   NFmanufacturerOrder,
						   TrUserData)};
	   {_, #{manufacturerOrder := NFmanufacturerOrder}} ->
	       S4#{manufacturerOrder => NFmanufacturerOrder};
	   {#{manufacturerOrder := PFmanufacturerOrder}, _} ->
	       S4#{manufacturerOrder => PFmanufacturerOrder};
	   {_, _} -> S4
	 end,
    case {PMsg, NMsg} of
      {#{importerOffer := PFimporterOffer},
       #{importerOffer := NFimporterOffer}} ->
	  S5#{importerOffer =>
		  merge_msg_ImporterOffer(PFimporterOffer,
					  NFimporterOffer, TrUserData)};
      {_, #{importerOffer := NFimporterOffer}} ->
	  S5#{importerOffer => NFimporterOffer};
      {#{importerOffer := PFimporterOffer}, _} ->
	  S5#{importerOffer => PFimporterOffer};
      {_, _} -> S5
    end.

-compile({nowarn_unused_function,merge_msg_User/3}).
merge_msg_User(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{username := NFusername}} ->
	       S1#{username => NFusername};
	   {#{username := PFusername}, _} ->
	       S1#{username => PFusername};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{password := NFpassword}} ->
	       S2#{password => NFpassword};
	   {#{password := PFpassword}, _} ->
	       S2#{password => PFpassword};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{type := NFtype}} -> S3#{type => NFtype};
      {#{type := PFtype}, _} -> S3#{type => PFtype};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_Response/3}).
merge_msg_Response(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{response := NFresponse}} ->
	  S1#{response => NFresponse};
      {#{response := PFresponse}, _} ->
	  S1#{response => PFresponse};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_ManufacturerOrder/3}).
merge_msg_ManufacturerOrder(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{id := NFid}} -> S1#{id => NFid};
	   {#{id := PFid}, _} -> S1#{id => PFid};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{manufacturer := NFmanufacturer}} ->
	       S2#{manufacturer => NFmanufacturer};
	   {#{manufacturer := PFmanufacturer}, _} ->
	       S2#{manufacturer => PFmanufacturer};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{product := NFproduct}} ->
	       S3#{product => NFproduct};
	   {#{product := PFproduct}, _} ->
	       S3#{product => PFproduct};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{minQuantity := NFminQuantity}} ->
	       S4#{minQuantity => NFminQuantity};
	   {#{minQuantity := PFminQuantity}, _} ->
	       S4#{minQuantity => PFminQuantity};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {_, #{maxQuantity := NFmaxQuantity}} ->
	       S5#{maxQuantity => NFmaxQuantity};
	   {#{maxQuantity := PFmaxQuantity}, _} ->
	       S5#{maxQuantity => PFmaxQuantity};
	   _ -> S5
	 end,
    S7 = case {PMsg, NMsg} of
	   {_, #{unitPrice := NFunitPrice}} ->
	       S6#{unitPrice => NFunitPrice};
	   {#{unitPrice := PFunitPrice}, _} ->
	       S6#{unitPrice => PFunitPrice};
	   _ -> S6
	 end,
    S8 = case {PMsg, NMsg} of
	   {_, #{active := NFactive}} -> S7#{active => NFactive};
	   {#{active := PFactive}, _} -> S7#{active => PFactive};
	   _ -> S7
	 end,
    case {PMsg, NMsg} of
      {_, #{negotiation := NFnegotiation}} ->
	  S8#{negotiation => NFnegotiation};
      {#{negotiation := PFnegotiation}, _} ->
	  S8#{negotiation => PFnegotiation};
      _ -> S8
    end.

-compile({nowarn_unused_function,merge_msg_ImporterOffer/3}).
merge_msg_ImporterOffer(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{id := NFid}} -> S1#{id => NFid};
	   {#{id := PFid}, _} -> S1#{id => PFid};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{manufacturer := NFmanufacturer}} ->
	       S2#{manufacturer => NFmanufacturer};
	   {#{manufacturer := PFmanufacturer}, _} ->
	       S2#{manufacturer => PFmanufacturer};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{product := NFproduct}} ->
	       S3#{product => NFproduct};
	   {#{product := PFproduct}, _} ->
	       S3#{product => PFproduct};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{quantity := NFquantity}} ->
	       S4#{quantity => NFquantity};
	   {#{quantity := PFquantity}, _} ->
	       S4#{quantity => PFquantity};
	   _ -> S4
	 end,
    case {PMsg, NMsg} of
      {_, #{unitPrice := NFunitPrice}} ->
	  S5#{unitPrice => NFunitPrice};
      {#{unitPrice := PFunitPrice}, _} ->
	  S5#{unitPrice => PFunitPrice};
      _ -> S5
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Message' -> v_msg_Message(Msg, [MsgName], TrUserData);
      'User' -> v_msg_User(Msg, [MsgName], TrUserData);
      'Response' ->
	  v_msg_Response(Msg, [MsgName], TrUserData);
      'ManufacturerOrder' ->
	  v_msg_ManufacturerOrder(Msg, [MsgName], TrUserData);
      'ImporterOffer' ->
	  v_msg_ImporterOffer(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_Message/3}).
-dialyzer({nowarn_function,v_msg_Message/3}).
v_msg_Message(#{} = M, Path, TrUserData) ->
    case M of
      #{type := F1} ->
	  v_type_string(F1, [type | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{user := F2} ->
	  v_msg_User(F2, [user | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{response := F3} ->
	  v_msg_Response(F3, [response | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{manufacturerOrder := F4} ->
	  v_msg_ManufacturerOrder(F4, [manufacturerOrder | Path],
				  TrUserData);
      _ -> ok
    end,
    case M of
      #{importerOffer := F5} ->
	  v_msg_ImporterOffer(F5, [importerOffer | Path],
			      TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (type) -> ok;
		      (user) -> ok;
		      (response) -> ok;
		      (manufacturerOrder) -> ok;
		      (importerOffer) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Message(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Message'},
		  M, Path);
v_msg_Message(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Message'}, X, Path).

-compile({nowarn_unused_function,v_msg_User/3}).
-dialyzer({nowarn_function,v_msg_User/3}).
v_msg_User(#{} = M, Path, TrUserData) ->
    case M of
      #{username := F1} ->
	  v_type_string(F1, [username | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{password := F2} ->
	  v_type_string(F2, [password | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{type := F3} ->
	  v_type_int32(F3, [type | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (username) -> ok;
		      (password) -> ok;
		      (type) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_User(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'User'},
		  M, Path);
v_msg_User(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'User'}, X, Path).

-compile({nowarn_unused_function,v_msg_Response/3}).
-dialyzer({nowarn_function,v_msg_Response/3}).
v_msg_Response(#{} = M, Path, TrUserData) ->
    case M of
      #{response := F1} ->
	  v_type_string(F1, [response | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (response) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Response(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Response'},
		  M, Path);
v_msg_Response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Response'}, X, Path).

-compile({nowarn_unused_function,v_msg_ManufacturerOrder/3}).
-dialyzer({nowarn_function,v_msg_ManufacturerOrder/3}).
v_msg_ManufacturerOrder(#{} = M, Path, TrUserData) ->
    case M of
      #{id := F1} ->
	  v_type_int64(F1, [id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{manufacturer := F2} ->
	  v_type_string(F2, [manufacturer | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{product := F3} ->
	  v_type_string(F3, [product | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{minQuantity := F4} ->
	  v_type_int64(F4, [minQuantity | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{maxQuantity := F5} ->
	  v_type_int64(F5, [maxQuantity | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{unitPrice := F6} ->
	  v_type_double(F6, [unitPrice | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{active := F7} ->
	  v_type_int32(F7, [active | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{negotiation := F8} ->
	  v_type_int64(F8, [negotiation | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
		      (manufacturer) -> ok;
		      (product) -> ok;
		      (minQuantity) -> ok;
		      (maxQuantity) -> ok;
		      (unitPrice) -> ok;
		      (active) -> ok;
		      (negotiation) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_ManufacturerOrder(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ManufacturerOrder'},
		  M, Path);
v_msg_ManufacturerOrder(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ManufacturerOrder'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_ImporterOffer/3}).
-dialyzer({nowarn_function,v_msg_ImporterOffer/3}).
v_msg_ImporterOffer(#{} = M, Path, TrUserData) ->
    case M of
      #{id := F1} ->
	  v_type_int64(F1, [id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{manufacturer := F2} ->
	  v_type_string(F2, [manufacturer | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{product := F3} ->
	  v_type_string(F3, [product | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{quantity := F4} ->
	  v_type_int64(F4, [quantity | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{unitPrice := F5} ->
	  v_type_double(F5, [unitPrice | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
		      (manufacturer) -> ok;
		      (product) -> ok;
		      (quantity) -> ok;
		      (unitPrice) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_ImporterOffer(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ImporterOffer'},
		  M, Path);
v_msg_ImporterOffer(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ImporterOffer'}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_double(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) ->
    mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{msg, 'Message'},
      [#{name => type, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => user, fnum => 2, rnum => 3,
	 type => {msg, 'User'}, occurrence => optional,
	 opts => []},
       #{name => response, fnum => 3, rnum => 4,
	 type => {msg, 'Response'}, occurrence => optional,
	 opts => []},
       #{name => manufacturerOrder, fnum => 4, rnum => 5,
	 type => {msg, 'ManufacturerOrder'},
	 occurrence => optional, opts => []},
       #{name => importerOffer, fnum => 5, rnum => 6,
	 type => {msg, 'ImporterOffer'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'User'},
      [#{name => username, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => password, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []},
       #{name => type, fnum => 3, rnum => 4, type => int32,
	 occurrence => optional, opts => []}]},
     {{msg, 'Response'},
      [#{name => response, fnum => 4, rnum => 2,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'ManufacturerOrder'},
      [#{name => id, fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []},
       #{name => manufacturer, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []},
       #{name => product, fnum => 3, rnum => 4, type => string,
	 occurrence => optional, opts => []},
       #{name => minQuantity, fnum => 4, rnum => 5,
	 type => int64, occurrence => optional, opts => []},
       #{name => maxQuantity, fnum => 5, rnum => 6,
	 type => int64, occurrence => optional, opts => []},
       #{name => unitPrice, fnum => 6, rnum => 7,
	 type => double, occurrence => optional, opts => []},
       #{name => active, fnum => 7, rnum => 8, type => int32,
	 occurrence => optional, opts => []},
       #{name => negotiation, fnum => 8, rnum => 9,
	 type => int64, occurrence => optional, opts => []}]},
     {{msg, 'ImporterOffer'},
      [#{name => id, fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []},
       #{name => manufacturer, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []},
       #{name => product, fnum => 3, rnum => 4, type => string,
	 occurrence => optional, opts => []},
       #{name => quantity, fnum => 4, rnum => 5, type => int64,
	 occurrence => optional, opts => []},
       #{name => unitPrice, fnum => 5, rnum => 6,
	 type => double, occurrence => optional, opts => []}]}].


get_msg_names() ->
    ['Message', 'User', 'Response', 'ManufacturerOrder',
     'ImporterOffer'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['Message', 'User', 'Response', 'ManufacturerOrder',
     'ImporterOffer'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('Message') ->
    [#{name => type, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => user, fnum => 2, rnum => 3,
       type => {msg, 'User'}, occurrence => optional,
       opts => []},
     #{name => response, fnum => 3, rnum => 4,
       type => {msg, 'Response'}, occurrence => optional,
       opts => []},
     #{name => manufacturerOrder, fnum => 4, rnum => 5,
       type => {msg, 'ManufacturerOrder'},
       occurrence => optional, opts => []},
     #{name => importerOffer, fnum => 5, rnum => 6,
       type => {msg, 'ImporterOffer'}, occurrence => optional,
       opts => []}];
find_msg_def('User') ->
    [#{name => username, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => password, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => type, fnum => 3, rnum => 4, type => int32,
       occurrence => optional, opts => []}];
find_msg_def('Response') ->
    [#{name => response, fnum => 4, rnum => 2,
       type => string, occurrence => optional, opts => []}];
find_msg_def('ManufacturerOrder') ->
    [#{name => id, fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []},
     #{name => manufacturer, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => product, fnum => 3, rnum => 4, type => string,
       occurrence => optional, opts => []},
     #{name => minQuantity, fnum => 4, rnum => 5,
       type => int64, occurrence => optional, opts => []},
     #{name => maxQuantity, fnum => 5, rnum => 6,
       type => int64, occurrence => optional, opts => []},
     #{name => unitPrice, fnum => 6, rnum => 7,
       type => double, occurrence => optional, opts => []},
     #{name => active, fnum => 7, rnum => 8, type => int32,
       occurrence => optional, opts => []},
     #{name => negotiation, fnum => 8, rnum => 9,
       type => int64, occurrence => optional, opts => []}];
find_msg_def('ImporterOffer') ->
    [#{name => id, fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []},
     #{name => manufacturer, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => product, fnum => 3, rnum => 4, type => string,
       occurrence => optional, opts => []},
     #{name => quantity, fnum => 4, rnum => 5, type => int64,
       occurrence => optional, opts => []},
     #{name => unitPrice, fnum => 5, rnum => 6,
       type => double, occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"tp.Message">>) -> 'Message';
fqbin_to_msg_name(<<"tp.User">>) -> 'User';
fqbin_to_msg_name(<<"tp.Response">>) -> 'Response';
fqbin_to_msg_name(<<"tp.ManufacturerOrder">>) -> 'ManufacturerOrder';
fqbin_to_msg_name(<<"tp.ImporterOffer">>) -> 'ImporterOffer';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('Message') -> <<"tp.Message">>;
msg_name_to_fqbin('User') -> <<"tp.User">>;
msg_name_to_fqbin('Response') -> <<"tp.Response">>;
msg_name_to_fqbin('ManufacturerOrder') -> <<"tp.ManufacturerOrder">>;
msg_name_to_fqbin('ImporterOffer') -> <<"tp.ImporterOffer">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> tp.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "messages.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["messages.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["messages"].


get_msg_containment("messages") ->
    ['ImporterOffer', 'ManufacturerOrder', 'Message',
     'Response', 'User'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("messages") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("messages") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("messages") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("messages") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"tp.User">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"tp.ManufacturerOrder">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"tp.ImporterOffer">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"tp.Response">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"tp.Message">>) -> "messages";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.11.0".

gpb_version_as_list() ->
    [4,11,0].
